<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo搭建个人博客笔记]]></title>
    <url>%2F2018%2F07%2F27%2FHexo%2Bgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo+github搭建的过程分为以下几步： 安装Node.js 安装Git软件 安装hexo博客框架 测试本地运行（线下访问个人博客） 部署到Coding以及GitHub上（线上访问个人博客） 设置域名解析 其他（写一篇新的博文，设置categories,tags） Node.jsNode.js下载地址：https://nodejs.org/en/download/安装过程一路默认安装即可。 安装Git软件Git软件下载地址：https://git-scm.com/download安装过程一路默认安装即可。 安装Hexo什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo官方网站：https://hexo.io/zh-cn/ 安装安装命令： sudo npm install -g hexo-cli #-g表示全局安装 这里提一下：关于hexo的终端操作最好是在管理员模式下，读者可以采用按住Shift然后再点击鼠标右键选择弹出菜单的在此处打开Powershell窗口保证运行在管理员状态下。 初始化完成之后，因为会出现有些依赖包未安装成功的情况，所以请再输入以下命令安装依赖包: hexo install hexo –save # 安装依赖包 初始化hexo在电脑合适的位置新建一个文件夹存放博客。本文中取名为Blog文件夹。控制台命令行使用cd命令进入到Blog文件夹，输入以下命令进行初始化： hexo init # 初始化 测试本地运行完成以上安装步骤后，便可以在本地预览博客效果了。启动服务(npm install --&gt;hexo server --&gt;hexo clean --&gt;hexo generate --&gt;hexo deploy)输入以下命令： hexo s # 等同于hexo server，在本地服务器运行hexo clean #清理缓存hexo g # 等同于hexo generate，生成静态文件hexo d #部署文件到github 然后打开浏览器地址栏输入：http://localhost:4000/便可以预览生成的博客框架雏形了。 部署到GitHub注册GitHubgitHub网址如下：http://www.github.com部署到线上（GitHub）配置文件要区分站点配置文件和主题配置文件，首先站点配置文件和主题配置文件名称都是一样的_config.yml，站点配置文件在网站根目录，主题配置文件在根目录下的theme文件的具体theme下的_config.yml。 修改站点配置文件打开_config.yml到最后deploy选项：配置如下： 12345##Docs: https://hexo.io/docs/deployment.html #deploy: type: git repo: git@github.com:Young-3/young-3.github.io.git branch: master 注意：每个冒号后面都是有一个空格的，这是node的语法。 部署部署之前需要安装git部署插件，否则会提示Deployer not found错误。 npm install hexo-deployer-git –save 安装完毕后控制台输入： hexo g -d 随后访问你的以下网址（注意替换）： http//:yourName.github.io 域名购买域名.然后到gitub上配置 新建post写一篇新的博文两种方法： 在博文根目录的Source文件夹的post文件夹下直接新建一个md文件 在博文根目录打来PowerShell，然后输入hexo new &#39;你的标题&#39;回车在你的post文件夹下就新建了一个博文，打开编辑即可。然后使用hexo g -d部署到线上。 ps:每篇前面必加 12345---title: Hexo搭建个人博客笔记 ###文章题目categories: Hexo ###自动创建分类tags: GitHub hexo ###创建标签---]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>GitHub hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub笔记]]></title>
    <url>%2F2018%2F07%2F25%2Fgit%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Git基本操作创建版本库安装好git后,打开git,输入: $ git config –global user.name “Your Name” $ git config –global user.email “email@example.com“ 创建文件夹 mkdir name(文件夹名字 ) 初始化库,里面会生成.git隐藏文件夹 git init 上传到本地库中（这里用的案例用readme.txt） git add readme.txt(将文本上传到本地暂存库库) git status(查看上传的状态)***随时掌握库的状态 git commit -m “first” (提交到本地库,’first’为注释，当上传项目到github时，作用是标注我上传该项目时的想法) 上传一个必备文件README.md ，这个文件是在每次初次上传项目文件时都需要必备的 touch README.md (这是windows下的命令.新建文件) git add README.md 查看文件内容cat readme.txt 版本回退版本1：wrote a readme file Git is a version control system. Git is free software. 版本2：add distributed Git is a distributed version control system. Git is free software. 版本3：append GPL Git is a distributed version control system. Git is free software distributed under the GPL. 日志查看git log $ git logcommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)Author:Date: ​ append GPL commit e475afc93c209a690c39c13a46716e8fa000c366Author:Date: ​ add distributed commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0Author:Date: wrote a readme file 简化日志git log --pretty=oneline,更简洁git log --oneline $ git log –pretty=oneline1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPLe475afc93c209a690c39c13a46716e8fa000c366 add distributedeaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file HEAD是指针,它指向哪,版本就在哪.1094adb7...是哈希算法生成的. 回退操作 基于索引值git reset -hard 1094adb7 基于^和~符号git reset -hard HEAD^只能回退,回退多个git reset -hard HEAD~n 小结 HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。 远程库生成SSH公钥关联在库文件夹下输入: $ cd ~/.ssh $ lsauthorized_keys2 id_dsa known_hostsconfig id_dsa.pub 看一下有没有id_rsa和id_rsa.pub(或者是id_dsa和id_dsa.pub之类成对的文件)，有 .pub 后缀的文件就是公钥，另一个文件则是密钥。 假如没有这些文件，甚至连 .ssh 目录都没有，可以用 ssh-keygen 来创建。该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里： $ ssh-keygen -t rsa -C “your_email@youremail.com“ Creates a new ssh key using the provided email # Generating public/private rsa key pair. Enter file in which to save the key (/home/you/.ssh/id_rsa): 直接按Enter就行。然后，会提示你输入密码，如下 Enter same passphrase again: [Type passphrase again] 完了之后，大概是这样： Your public key has been saved in /home/you/.ssh/id_rsa.pub.The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com 查看生成的公钥 $ cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3 Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx NrRFi9wrf+M7Q== schacon@agadorlaptop.local 添加公钥到远程仓库（github)登陆你的github帐户。点击你的头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key 然后你复制上面的公钥内容，粘贴进“Key”文本域内。 title域，自己随便起个名字。 点击 Add key。 完成以后，验证下这个key是不是正常工作： $ ssh -T git@github.comAttempts to ssh to github 如果看到 Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access. 设置成功 修改git的remote url使用命令git remote -v查看当前的 remote url 123&gt; $ git remote -v&gt; origin https://github.com/someaccount/someproject.git (fetch)&gt; origin https://github.com/someaccount/someproject.git (push) 改为ssh协议 git remote add origin git@github.com:someaccount/someproject.git 再用git remote -v查看 远程库操作 克隆远程库 git clone git@github.com:Young-3/project.git 关联远程库 git remote add origin git@github.com:Young-3/project.git 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。 把本地库的所有内容推送到远程库上 git push -u origin master]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
